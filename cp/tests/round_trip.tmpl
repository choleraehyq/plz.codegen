package test

import (
	"testing"
	"github.com/stretchr/testify/require"
	"github.com/google/gofuzz"
	"github.com/v2pro/plz"
	_ "github.com/v2pro/wombat/cp"
	"reflect"
	"fmt"
	"encoding/json"
)

func Test_round_trip(t *testing.T) {
	should := require.New(t)
	fz := fuzz.New().MaxDepth(10).NilChance(0.3)
	for i := 0; i < 100; i++ {
		var src srcType
		fz.Fuzz(&src)
		var dst dstType
		should.Nil(plz.Copy(&dst, src))
		var src2 srcType
		should.Nil(plz.Copy(&src2, dst))
		if !reflect.DeepEqual(src, src2) {
			fmt.Println(toJson(src))
			fmt.Println(toJson(dst))
			fmt.Println(toJson(src2))
			t.FailNow()
		}
	}
}

func toJson(obj interface{}) string {
	output, err := json.MarshalIndent(obj, "", "  ")
	if err != nil {
		panic(err.Error())
	}
	return string(output)
}